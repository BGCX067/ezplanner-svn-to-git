<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx" width="500" height="100"
			 xmlns:controls="com.ezplanner.calander.ui.controls.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[HostComponent("com.ezplanner.calander.ui.controls.TaskInputComponent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.ezplanner.calander.utils.Constants;
			
			import mx.events.FlexEvent;
			[Bindable][Embed(source="assets/images/mphone.png")]private var saveBtn1:Class;
			[Bindable][Embed(source="assets/images/email.png")]private var saveBtn2:Class;
			[Bindable][Embed(source="assets/images/lphone.png")]private var saveBtn3:Class;
			[Bindable][Embed(source="assets/images/save.png")]private var saveBtn4:Class;
			
			
			private function showAMPM(tm:String):String{
				 var t:Number = Number(tm);
				var ampm:String;
				ampm = t>=12 ? (t-12).toString()+":PM" : (t).toString()+":AM"; 
				ampm = t ==0 ?"12:AM" : ampm; 
				ampm = t-12 ==0 ?"12:PM" : ampm;  
				return ampm;
			}
			private function showHighlighted(item:Number,data:String):int {
				var reminders:Array = data.split("|");
				var colorNumber:int;
				switch(item)	{
					case 1: colorNumber = (Number(reminders[0]) == 1 ? Constants.HIGHLIGHT_COLOR : Constants.HIGHLIGHT_COLOR_NO);break;
					case 2: colorNumber = (Number(reminders[1]) == 1 ? Constants.HIGHLIGHT_COLOR : Constants.HIGHLIGHT_COLOR_NO);break;
					case 3: colorNumber = (Number(reminders[2]) == 1 ? Constants.HIGHLIGHT_COLOR : Constants.HIGHLIGHT_COLOR_NO);break;
				}
				return colorNumber;
			}
			
			protected function doReminder(rm:String):int
			{
				var colorNumber:int;
				colorNumber = (Number(rm) == 1 ? Constants.HIGHLIGHT_COLOR : Constants.HIGHLIGHT_COLOR_NO)
				return colorNumber
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:Rect radiusX="5" radiusY="5" width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>
	
		<s:VGroup width="100%" height="100%" gap="5" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"
				  contentBackgroundAlpha="0">
			<s:HGroup width="100%" height="20%" paddingTop="3" paddingLeft="8"
					  paddingBottom="5" paddingRight="5">
				<s:HGroup horizontalAlign="left" width="20%">
					<s:Label id="timeLbl" text="{showAMPM(hostComponent.taskVo.time.toString())}"/>
				</s:HGroup>
				<s:HGroup width="60%" horizontalAlign="left">
					<s:Label text="Set Reminders"/>
					<controls:IconButton highlight="{showHighlighted(1,hostComponent.taskVo.reminders.toString())}" id="mobile" icon="{saveBtn1}"/>
					<controls:IconButton highlight="{showHighlighted(2,hostComponent.taskVo.reminders.toString())}" id="land_phone" icon="{saveBtn3}"/>
					<controls:IconButton highlight="{showHighlighted(3,hostComponent.taskVo.reminders.toString())}" id="email" icon="{saveBtn2}"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="right" width="20%">
					<s:Label text="Dont Remind me"/>
					<controls:IconButton id="noreminder" highlight="{doReminder(hostComponent.taskVo.noReminder.toString())}" icon="{saveBtn4}"/>
				</s:HGroup>
			</s:HGroup>
			<s:HGroup width="100%" height="80%" paddingLeft="5"
					  paddingBottom="5" paddingRight="5">
				<s:TextArea id="descTxt" width="100%" height="100%" borderColor="#CCCCCC" text="{hostComponent.taskVo.description}"/>
			</s:HGroup>
		</s:VGroup>
		
</s:SparkSkin>
